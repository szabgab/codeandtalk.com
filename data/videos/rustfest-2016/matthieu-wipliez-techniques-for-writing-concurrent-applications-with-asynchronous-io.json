{
    "description": "This talk is about asynchronous I/O: how asynchronous compares to the traditional synchronous approach, how this changes the architecture of applications, and how to do asynchronous I/O in a concurrent multi-threaded application. Starting from a high-level view, we will then dive into code to explore useful code idioms and how to design ergonomic Rust APIs. This will include for instance how to store callbacks with unique types and call them from different threads, how to get lifetimes shorter than â€˜static in threads and the associated benefits.\n\nI am doing this talk based on the experience I gained developing a Web framework on top of the asynchronous version of Hyper, the most used HTTP library for Rust. Principles should apply to lower-level libraries and other protocol stacks as well.\n\n---\nFor more go to https://rustfest.eu or follow us on Twitter: https://twitter.com/rustfest\n\nHelp us caption & translate this video!\n\nhttp://amara.org/v/2FiR/",
    "favorite": "0",
    "length": "31:30",
    "likes": "18",
    "recorded": "2016-09-17",
    "speakers": [
        "matthieu-wipliez"
    ],
    "tags": [],
    "thumbnail_url": "https://i.ytimg.com/vi/VNUiycotp8U/hqdefault.jpg",
    "title": "Techniques for writing concurrent applications with asynchronous I/O",
    "videos": [
        {
            "code": "VNUiycotp8U",
            "type": "youtube"
        }
    ],
    "views": "858"
}