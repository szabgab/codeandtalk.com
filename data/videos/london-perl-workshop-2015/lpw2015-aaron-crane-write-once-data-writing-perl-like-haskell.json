{
    "description": "Languages like Haskell and Idris don’t have “variables” in the same way that Perl does: once a name has been associated with a value, it has that same value immutably and forever. This approach is perhaps surprising, but it has some big advantages: it’s much easier to reason about what your program’s doing, especially for data that’s being accessed from multiple processes.\n\nThis talk offers a case study of a piece of real-world Perl software that scrapes rich, detailed information from web pages published by the Scottish and UK parliaments, and presents it to commercial customers. The software is designed around this idea of never changing data once it’s been assigned, and makes full use of that fact to promote highly concurrent operation. This turns out to be a fruitful approach to software design, even in a language like Perl, which has none of Haskell’s features for working with immutable data.",
    "favorite": "0",
    "length": "36:30",
    "likes": "0",
    "recorded": "2015-12-12",
    "speakers": [
        "aaron-crane"
    ],
    "tags": [],
    "thumbnail_url": "https://i.ytimg.com/vi/qcuTdy9uaM0/hqdefault.jpg",
    "title": "Write once data: writing Perl like Haskell",
    "videos": [
        {
            "code": "qcuTdy9uaM0",
            "type": "youtube"
        }
    ],
    "views": "44"
}