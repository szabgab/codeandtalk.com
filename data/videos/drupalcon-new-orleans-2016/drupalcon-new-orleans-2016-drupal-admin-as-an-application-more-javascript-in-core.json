{
    "abstract": "https://events.drupal.org/neworleans2016/sessions/drupal-admin-application-javascript-or-not",
    "description": "In recent months, much debate has revolved around the compelling user experiences increasingly accompanying the runaway growth of JavaScript frameworks. Some argue that Drupal already has many moving parts and should evolve toward more seamless user experiences with existing tools and better processes. Some argue that Drupal should address this trend with additional capabilities for JavaScript in the form of a JavaScript framework. Some argue we should look at using modern PHP and JavaScript technologies that don’t require a JavaScript framework. Others have positions that fall both inside and outside this spectrum!\n\nWhat are the advantages and disadvantages of more JavaScript-driven administration for both users and developers?\n\nAdvantages could include limited page refreshes, better perceived performance, and seamless state changes through client-side rendering, state management, and templating, as well as a more modern front-end developer experience.\n\nDisadvantages could include delaying the initial rendering of some admin content until after the browser downloads and parses a JavaScript framework or potentially complicated workarounds to generate the initial render with Drupal, when these frameworks tend to be executed server-side with Node.js.\n\nHow can Drupal concretely improve the front-end developer experience for veteran contributors who have long worked on Drupal as well as novice contributors who work in other paradigms and may never have heard of Drupal?\n\nDoes Drupal need a new JavaScript framework or library to supersede Backbone?\n\nThe JavaScript ecosystem is evolving rapidly: given that it will take time to integrate any new framework, how do we deal with the possibility that whatever framework is selected could be considered outdated once we finish Drupal integration, just like what happened with Backbone?\n\nWhat are some alternate approaches to reducing server roundtrips and providing optimistic feedback through newer PHP and JS technologies that might not need a client-side JS framework but which may result in incurring higher infrastructure costs or making Drupal more difficult to install?\n\nWhat are the next concrete steps as a result of this discussion?\n\nThis will be a neutral and unopinionated core conversation generously moderated by neutral observer Dani Nordin (Pegasystems) — thank you Dani! — and facilitated by Marc Drummond (Lullabot) and Preston So (Acquia).\n\nAlso see Drupal's front-end future: A compilation of ideas for more background.",
    "favorite": "0",
    "length": "01:06:20",
    "likes": "2",
    "recorded": "2016-05-09",
    "speakers": [
        "preston-so",
        "dani-nordin",
        "marc-drummond"
    ],
    "tags": [],
    "thumbnail_url": "https://i.ytimg.com/vi/Sn4jDELDNMY/hqdefault.jpg",
    "title": "Drupal (admin) as an application: More JavaScript in core?",
    "videos": [
        {
            "code": "Sn4jDELDNMY",
            "type": "youtube"
        }
    ],
    "views": "248"
}