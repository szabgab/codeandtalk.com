{
    "description": "Quality Tests in Go\n\nAutomated tests help keep quality high, protect from regression, and provide a form of clear and correct documentation about the expectations people can have about your code. The founders of the language knew this, which is why testing in Go is a first class concern. This talk takes you on a whirlwind tour of quality testing in Go; the good, the bad and the fugly. When Alfred builds Batman’s vehicles, weapons and pants, there is no doubt he practices TDD (Test Driven Development). You never hear Batman say, “Alfred, can you revert that last pull request, my utility belt is way too tight!\"\n\nMat Ryer has been coding since he was six years old where he would copy code out of computer magazines with his father before hacking away at the programs to see what might happen. That same spirit lead him to start programming in Go before its v1 release (when os.Error was still a thing) after falling in love with its simplicity and elegance. He’s a regular contributor to open-source projects (Testify, Silk, Moq, BitBar) and writes about Go on his blog (matryer.com). In 2015 he published Go Programming Blueprints Go Programming Blueprints and is following it up with a Second Edition.\n\nToday he works for GrayMeta but can often be seen and heard speaking at conferences around the world, making jokes that, out of sheer politeness and respect, the audience remain silent to.",
    "favorite": "0",
    "length": "24:20",
    "likes": "6",
    "recorded": "2016-11-18",
    "speakers": [
        "mat-ryer"
    ],
    "tags": [],
    "thumbnail_url": "https://i.ytimg.com/vi/MMnaq2jwAiE/hqdefault.jpg",
    "title": "Quality Tests in Go",
    "videos": [
        {
            "code": "MMnaq2jwAiE",
            "type": "youtube"
        }
    ],
    "views": "315"
}